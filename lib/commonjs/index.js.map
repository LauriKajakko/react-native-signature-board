{"version":3,"sources":["index.tsx"],"names":["NATIVE_NAME","NativeSignatureBoard","colorHelper","color","startsWith","length","r","g","b","UIManagerSendMsg","nativeRef","name","args","id","current","command","UIManager","getViewManagerConfig","Commands","dispatchViewManagerCommand","SignatureBoard","React","forwardRef","props","ref","style","bgColor","lineColor","lineWidth","onImageFinish","useRef","useImperativeHandle","clear","getImage","opaque","handleImageFinish","useCallback","result","nativeEvent","res"],"mappings":";;;;;;;AAAA;;AACA;;;;AAiBA,MAAMA,WAAW,GAAG,oBAApB;AACA,MAAMC,oBAAoB,GAAG,yCAAkDD,WAAlD,CAA7B;;AACA,MAAME,WAAW,GAAIC,KAAD,IAA2B;AAC7C,MAAIA,KAAK,CAACC,UAAN,CAAiB,GAAjB,CAAJ,EAA2B;AACzB,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB,OAAOF,KAAP,CAAxB,KACK,IAAIA,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AAC3B,YAAMC,CAAC,GAAGH,KAAK,CAAC,CAAD,CAAL,GAAW,EAArB;AACA,YAAMI,CAAC,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAW,EAArB;AACA,YAAMK,CAAC,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW,EAArB;AACA,aAAQ,IAAGG,CAAE,GAAEA,CAAE,GAAEC,CAAE,GAAEA,CAAE,GAAEC,CAAE,GAAEA,CAAE,EAAjC;AACD;AACD,WAAO,SAAP;AACD;;AACD,SAAO,SAAP;AACD,CAZD;;AAaA,MAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAyCC,IAAzC,EAAuDC,IAAW,GAAG,EAArE,KAA4E;AACnG,MAAI,CAACF,SAAL,EAAgB;AAChB,QAAMG,EAAE,GAAG,iCAAeH,SAAS,CAACI,OAAzB,CAAX;;AACA,QAAMC,OAAO,GAAGC,uBAAUC,oBAAV,CAA+BjB,WAA/B,EAA4CkB,QAA5C,CAAqDP,IAArD,CAAhB;;AACAK,yBAAUG,0BAAV,CAAqCN,EAArC,EAAyCE,OAAzC,EAAkDH,IAAlD;AACD,CALD;;AAMO,MAAMQ,cAAc,gBAAGC,eAAMC,UAAN,CAAoD,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAChG,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,SAAlB;AAA6BC,IAAAA,SAA7B;AAAwCC,IAAAA;AAAxC,MAA0DN,KAAhE;;AACA,QAAMb,SAAS,GAAGW,eAAMS,MAAN,CAAa,IAAb,CAAlB;;AACAT,iBAAMU,mBAAN,CAA0BP,GAA1B,EAA+B,OAAO;AACpCQ,IAAAA,KAAK,EAAE,MAAYvB,gBAAgB,CAACC,SAAD,EAAY,OAAZ,CADC;AAEpCuB,IAAAA,QAAQ,EAAE,CAACC,MAAe,GAAG,IAAnB,KAAkCzB,gBAAgB,CAACC,SAAD,EAAY,UAAZ,EAAwB,CAACwB,MAAD,CAAxB;AAFxB,GAAP,CAA/B;;AAIA,QAAMC,iBAAiB,GAAGd,eAAMe,WAAN,CAAmBC,MAAD,IAAY;AACtD,QAAIR,aAAJ,EAAmBA,aAAa,CAAE,yBAAwBQ,MAAM,CAACC,WAAP,CAAmBC,GAAI,EAAjD,CAAb;AACpB,GAFyB,EAEvB,CAACV,aAAD,CAFuB,CAA1B;;AAGA,sBACE,6BAAC,oBAAD;AACE,IAAA,aAAa,EAAEM,iBADjB;AAEE,IAAA,GAAG,EAAEzB,SAFP;AAGE,IAAA,KAAK,EAAEe,KAHT;AAIE,IAAA,OAAO,EAAEvB,WAAW,CAACwB,OAAO,IAAI,MAAZ,CAJtB;AAKE,IAAA,SAAS,EAAExB,WAAW,CAACyB,SAAS,IAAI,MAAd,CALxB;AAME,IAAA,SAAS,EAAEC;AANb,IADF;AAUD,CApB6B,CAAvB;;;eAqBQR,c","sourcesContent":["import { findNodeHandle, requireNativeComponent, UIManager, ViewStyle } from 'react-native'\nimport React from 'react'\ninterface NativeSignatureBoardBase {\n  style?: ViewStyle\n  bgColor?: string\n  lineColor?: string\n  lineWidth?: number\n}\ninterface NativeSignatureBoardProps extends NativeSignatureBoardBase {\n  onImageFinish?: (res: any) => void\n}\nexport interface SignatureBoardProps extends NativeSignatureBoardBase {\n  onImageFinish?: (res: string) => void\n}\nexport interface SignatureRef {\n  clear: () => void\n  getImage: (opaque: boolean) => void\n}\nconst NATIVE_NAME = 'SignatureBoardView'\nconst NativeSignatureBoard = requireNativeComponent<NativeSignatureBoardProps>(NATIVE_NAME)\nconst colorHelper = (color: string): string => {\n  if (color.startsWith('#')) {\n    if (color.length === 7) return color\n    else if (color.length === 4) {\n      const r = color[1] + ''\n      const g = color[2] + ''\n      const b = color[3] + ''\n      return `#${r}${r}${g}${g}${b}${b}`\n    }\n    return '#ffffff'\n  }\n  return '#ffffff'\n}\nconst UIManagerSendMsg = (nativeRef: React.MutableRefObject<any>, name: string, args: any[] = []) => {\n  if (!nativeRef) return\n  const id = findNodeHandle(nativeRef.current)\n  const command = UIManager.getViewManagerConfig(NATIVE_NAME).Commands[name]\n  UIManager.dispatchViewManagerCommand(id, command, args)\n}\nexport const SignatureBoard = React.forwardRef<SignatureRef, SignatureBoardProps>((props, ref) => {\n  const { style, bgColor, lineColor, lineWidth, onImageFinish } = props\n  const nativeRef = React.useRef(null)\n  React.useImperativeHandle(ref, () => ({\n    clear: (): void => UIManagerSendMsg(nativeRef, 'clear'),\n    getImage: (opaque: boolean = true): void => UIManagerSendMsg(nativeRef, 'getImage', [opaque]),\n  }))\n  const handleImageFinish = React.useCallback((result) => {\n    if (onImageFinish) onImageFinish(`data:image/png;base64,${result.nativeEvent.res}`)\n  }, [onImageFinish])\n  return (\n    <NativeSignatureBoard\n      onImageFinish={handleImageFinish}\n      ref={nativeRef}\n      style={style}\n      bgColor={colorHelper(bgColor || '#FFF')}\n      lineColor={colorHelper(lineColor || '#000')}\n      lineWidth={lineWidth}\n    />\n  )\n})\nexport default SignatureBoard\n"]}